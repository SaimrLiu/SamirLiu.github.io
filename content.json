{"meta":{"title":"隨勛所欲 - Google Analytics 網站分析","subtitle":"從未如此簡單有趣","description":"專注分享網頁追蹤、資料分析，包含各廣告追蹤。","author":"Samir Liu","url":"https://samirliu127.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-11-09T03:23:36.000Z","updated":"2019-11-14T01:05:06.076Z","comments":false,"path":"categories/index.html","permalink":"https://samirliu127.github.io/categories/index.html","excerpt":"","text":""},{"title":"隨筆","date":"2019-11-09T03:01:12.000Z","updated":"2019-11-14T01:05:06.076Z","comments":true,"path":"/categories/others/index.html","permalink":"https://samirliu127.github.io/categories/others/index.html","excerpt":"","text":""},{"title":"網站分析","date":"2019-11-09T01:53:30.000Z","updated":"2019-11-14T01:05:06.077Z","comments":true,"path":"/categories/tracking/index.html","permalink":"https://samirliu127.github.io/categories/tracking/index.html","excerpt":"","text":""},{"title":"python","date":"2019-11-09T03:00:48.000Z","updated":"2019-11-14T01:05:06.077Z","comments":true,"path":"/categories/python/index.html","permalink":"https://samirliu127.github.io/categories/python/index.html","excerpt":"","text":""}],"posts":[{"title":"Python 實現 RFM 用戶分析模型","slug":"Python-實現-RFM-用戶分析模型","date":"2019-11-29T07:15:06.000Z","updated":"2019-11-29T07:15:06.768Z","comments":true,"path":"posts/32264.html","link":"","permalink":"https://samirliu127.github.io/posts/32264.html","excerpt":"","text":"RFM 是個簡易分析客戶價值的模型，在電商零售上常常使用。RFM 透過客戶近期的購買行為(Recency)、購買頻率(Frequency)、購買花費(Monetary) 三項指標評估客戶的價值狀況。 模型意義 最近一次消費(Recency)：上一次消費時間越近的顧客應該是比較好的顧客，對提供即時的商品或是服務也最有可能會有反應。 消費頻率(Frequency)：也就是常客，也可以說是客戶對品牌的忠誠度，頻率高的優於頻率低的客戶。 消費金額(Monetary)：客戶消費力，依循 Pareto’s Law (八二法則)，80％的銷售額來自20％的客戶，高消費金額優於低消費金額。 客戶分群意義 Recency 消費時間 Frequency 頻率 Monetary 金額 客戶分群 近 高 高 高價值，常貴客戶 遠 高 高 高價值，流失客戶 近 低 高 高價值，新客戶 遠 低 高 高價值，淺在客戶 近 高 低 一般價值，常貴客戶 遠 高 低 一般價值，流失客戶 近 低 低 一般價值，新客戶 遠 低 低 一般價值，淺在客戶 以 R 與 F 分析圖劃分 Python 程式碼使用 kaggle 的資料做練習 Data Prepare資料清理，排除缺失值與負值，並計算出收益。 import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from datetime import datetime # Data Prepare df = pd.read_csv('data.csv', encoding = \"ISO-8859-1\") df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate']) # 日期轉換 df_new = df.dropna() # 排除缺失值 df_new = df_new[df_new.Quantity > 0] # 排除負值 df_new = df_new[df_new.UnitPrice > 0] # 排除負值 df['Revenue'] = df['Quantity'] * df['UnitPrice'] # 收益計算 df['CustomerID'] = df['CustomerID'].astype('int64') # CustomerID 轉換 RFM Table統計個人消費行為，得到至今最近一次消費的天數、消費次數、消費總金額 NOW = datetime(2011,12,10) # 資料最後一天為 2011/12/09 rfm_df = df.groupby('CustomerID').agg({ 'InvoiceDate': lambda x: (NOW - x.max()).days, # 近一次消費天 'InvoiceNo': lambda x: x.nunique(), # 消費次數 'Revenue': lambda x: x.sum() # 消費金額 }).reset_index() rfm_df.rename( columns={'InvoiceDate': 'recency', 'InvoiceNo': 'frequency', 'Revenue': 'monetary'}, inplace=True ) # 重新命名 rfm_df['user'] = 1 # 繪圖計數用 RFM Model使用中位數(median)將數據分為兩級，也可以使用 33 與 66 分位(quantile)分三級 # 根據值將資料分級 # col_val: 輸入值, level: 分級級距 def get_level(col_val, level: list): for idx, val in enumerate(reversed(level)): if col_val >= val: return f'≥{int(val)}' # 分級 recency_level = [0, rfm_df['recency'].median()] recency_label = [f'≥{int(i)}' for i in recency_level] rfm_df['recency_label'] = rfm_df['recency'].apply( lambda x: get_level(x, recency_level) ) frequency_level = [0, rfm_df['frequency'].median()] frequency_label = [f'≥{int(i)}' for i in frequency_level] rfm_df['frequency_label'] = rfm_df['frequency'].apply( lambda x: get_level(x, frequency_level) ) monetary_level = [0, rfm_df['monetary'].median()] monetary_label = [f'≥{int(i)}' for i in monetary_level] rfm_df['monetary_label'] = rfm_df['monetary'].apply( lambda x: get_level(x, monetary_level) ) RFM Draw利用 seaborn 繪圖，分成四個區塊為各個客戶群，裡面兩條長條圖分別為高消費力與低消費力的人數 g = sns.FacetGrid( rfm_df, # 來源資料表 col=\"recency_label\", # X資料來源欄位 row=\"frequency_label\" , # Y資料來源欄位 col_order=recency_label, # X資料順序 row_order=frequency_label[::-1], # Y資料順序 margin_titles=True # 小圖啟用 ) g = g.map_dataframe( sns.barplot, # 資料顯示的模式 x='monetary_label', # 小圖表X資料來源 y='user', # 小圖表Y資料來源，訪客計數 order=monetary_label, # X資料順序 estimator=sum, # Y計數加總 palette = sns.color_palette(\"muted\") #畫布色調 ) g = g.set_axis_labels('Recency','Frequency').add_legend() 找出 VIP 客戶群最後可以根據條件對不同客戶群分別做行銷 vip = rfm_df[ (rfm_df['frequency_label'] == frequency_label[-1]) &amp; (rfm_df['recency_label'] == recency_label[-1]) &amp; (rfm_df['monetary_label'] == monetary_label[-1]) ] vip.head(10)","categories":[{"name":"Python","slug":"python","permalink":"https://samirliu127.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://samirliu127.github.io/tags/python/"}]},{"title":"Google Analytics 內容分組","slug":"Google-Analytics-內容分組","date":"2019-11-25T07:52:18.000Z","updated":"2019-11-25T07:57:39.219Z","comments":true,"path":"posts/26559.html","link":"","permalink":"https://samirliu127.github.io/posts/26559.html","excerpt":"","text":"介紹一個很少人使用的好功能，內容分組可以把頁面依照自己的方式分類，之後在資料有使用到網頁(pagePath)這個維度就非常有幫助。 內容分組 設置到 管理 &gt; 資料檢視 &gt; 內容分組 新增內容分類。 內容分組有三種分類方式，分別是追蹤程式碼、使用者資訊擷取、使用者規則定義，這邊使用使用者規則定義做範例。以我的網站來定義幾個常用的類別分類頁 =&gt; 網頁 開頭是 /categories/標籤分類頁 =&gt; 網頁 開頭是 /tags/文章分類頁 =&gt; 網頁 開頭是 /posts/ 最後注意幾點 內容分組為設置完當下才會生效，並不會套用到過去資料。 分類順序要注意，一個頁面只會優先分到第一個媒合的內容分頁。 未被媒合的頁面會分類至(not set) 內容分組為資料檢視層，不同資料檢視需另外設置。分類應用 之後大部分有使用到網頁的維度皆可切換成內容分組，方便資料分析。","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"將 Google Analytics 數據同步到 Google Sheet","slug":"將-Google-Analytics-數據同步到-Google-Sheet","date":"2019-11-22T09:15:01.000Z","updated":"2019-11-22T09:15:01.848Z","comments":true,"path":"posts/51238.html","link":"","permalink":"https://samirliu127.github.io/posts/51238.html","excerpt":"","text":"Google 試算表(Sheet) 有個好用的小工具，可以設定排程取得 Google Analytics 的數據，對習慣使用試算表的人是一大福音。 步驟安裝： 建立 Google Sheet。 安裝外掛工具，從外掛程式 &gt; 取得外掛程式可以找到 Google Analytics 的外掛工具。 建立報表： 授權安裝後，點選Create new report。 根據需求選擇 Google Analytics、維度(Dimension)、指標(Metrics)後建立報表，維度跟指標的文件可以參考這邊。 會產生一個試算表 Report Configuration，是取得數據相關的任務設定。 執行與排程 在選單可以選擇立即執行與設定排程。 排成設定為自動跑報表的時間間隔。","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"},{"name":"Google Sheet","slug":"Google-Sheet","permalink":"https://samirliu127.github.io/tags/Google-Sheet/"}]},{"title":"Facebook Pixel 代碼部署","slug":"Facebook-Pixel-代碼部署","date":"2019-11-20T07:52:47.000Z","updated":"2019-11-27T00:56:21.300Z","comments":true,"path":"posts/16262.html","link":"","permalink":"https://samirliu127.github.io/posts/16262.html","excerpt":"","text":"Facebook Pixel？臉書像素？是 Facebook 的網頁追蹤代碼，用於追蹤與衡量網站的訪客，可以針對指定受眾做在行銷或是建立相似受眾找到更多的淺在客戶群，所以在 Facebook 上投放廣告之前埋設追蹤碼是必要的。不過 Facebook 在 Google Tag Manager 沒有預設模組，所以需要用自訂 HTML 設置，不過有一些地方需要注意，確保資訊有正確的送出，若有其他問題歡迎留言提問。 Facebook Pixel 全頁追蹤 All PagesPageView這是預設的像素跟踪頁面訪問，在訪客登陸您的網站頁面時觸發，Facebook 後臺產生時會同時存在。 設置： 選用自訂 HTML 直接將程式碼貼上。 代碼觸發選項選用每個網頁一次，避免同一頁面觸發多次。 觸發條件選擇 All Pages。 事件 Event官方定義一些標準事件，這邊使用ViewContent與Contact做說明，兩者差異前者為到達頁面時觸發，後者為點擊觸發，在設置上稍有些不同，目的是確保訊息有正確的送出。 Facebook 事件都建議使用 trackSingle，避免影響其他的 pixel 事件收集，導致後臺計算成效時有落差。如：fbq(&#39;trackSingle&#39;, &#39;&lt;Pixel Id&gt;&#39;, &#39;&lt;Event&gt;&#39;); 到達指定頁面ViewContent為到達指定頁面時觸發，需要注意的是要在 PageView 完成後才能執行，同類型的有 InitiateCheckout、Purchase。 設置： 選用自訂 HTML 將事件代碼貼上。 代碼觸發順序勾選啟用前先啟用 PageView 代碼，這會確保代碼的執行順序。 觸發條件選擇 Dom Ready，加上指定頁面條件，再次確保代碼執行順序。 指定元素點擊Contact為點擊指定元素時觸發，通常發生時已經完成了 PageView 的事件，同類型常見的如：AddToCart、AddToWishlist、Search…等。 設置： 選用自訂 HTML 將事件代碼貼上。 觸發條件選擇點擊，加上指定元素條件。 檢查小工具 Facebook Pixel Helper","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Tag Manager","slug":"Google-Tag-Manager","permalink":"https://samirliu127.github.io/tags/Google-Tag-Manager/"},{"name":"Facebook","slug":"Facebook","permalink":"https://samirliu127.github.io/tags/Facebook/"}]},{"title":"Google Analytics 事件","slug":"Google-Analytics-事件","date":"2019-11-19T09:13:01.000Z","updated":"2019-11-22T08:13:04.692Z","comments":true,"path":"posts/25832.html","link":"","permalink":"https://samirliu127.github.io/posts/25832.html","excerpt":"","text":"之前的文章 Google Tag Manager 入門有提到如何用 GTM 設置全頁追蹤 GA。這次介紹另一個重要的功能事件，了解事件才算是脫離 GA 新手村。 Google Analytics 事件 事件在網頁分析上是個重要的功能，需要在網站安裝自訂義的程式碼，才會搜集事件的資料，從此觀察訪客與網站的互動行為。 事件的紀錄資料所填入的值只要是自己有辦法辨識即可，這邊分享我習慣的設置想法。 事件類別 (Category)訪客預期得到動作，如：Search, AddToCart, Contact。 事件動作 (Action)觸發事件的動作，如：Click, Scroll the page。 事件標籤 (Label)敘述文字，連結、簡短的說明，依情況設置。 事件價值 (Value)定義訪客互動的成效數值，依情況設置。 在 GTM 設置 GA 事件目標是追蹤首頁 Social 的四個按鈕的點擊次數。 設置變數啟用內建變數Click Element 觸發條件 代碼 如果需要個別追點擊次數，可以分開設置觸發條件與代碼。 檢查(Debug)在發佈之前使用預覽檢查。","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Tag Manager","slug":"Google-Tag-Manager","permalink":"https://samirliu127.github.io/tags/Google-Tag-Manager/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"Google Analytics 基本參數設置","slug":"Google-Analytics-基本參數設置","date":"2019-11-18T07:45:44.000Z","updated":"2019-11-27T00:56:21.301Z","comments":true,"path":"posts/14176.html","link":"","permalink":"https://samirliu127.github.io/posts/14176.html","excerpt":"","text":"這篇整理常用 Google Analytics 常用設置的說明，可能使用的情境：管理訪客 Coockie、動態網頁追蹤、跨站追蹤、跨裝置追蹤，在默認的環境下這些功能是沒有的，所以需要做一些個人化的設定。 Google Analytics 參數 官方文件 clientId(text)：訪客匿名識別 id，即為 Google Analytics 的第一方 Cookie _ga，可以在使用者多層檢視找到，預設為兩組數字組成，如 717269320.1574042822，分別為隨機數字與進站時間作為訪客的唯一識別。 cookieName(text)：用於儲存第一方 cookie 的名稱，預設為_ga。 sampleRate(number)：指定網站追蹤的用戶百分比。預設值為100。大流量網站可以降低讓 Google Analytics 保持在資料處理限制之內。 siteSpeedSampleRate(number)：指定網站數據計算的抽樣比例，預設值為10。 allowLinker(boolean)：預設為false，當需要跨站追蹤須設置為true。 userId(text)：訪客跨站、跨裝置的唯一識別 id，不能是能識別個人身份的資料(姓名、身分證字號、電子郵件地址等)，違反帳戶可能會被終止。 page(text)：頁面路徑，應該以/開頭，於動態網頁時須設置。 title(text)：頁面標題，於動態網頁時須設置。 Google Tag Manager 設置參數 在 Google Tag Manager 上設置非常簡單，只需要在 Google Analytics 的模組上新增所需要的欄位名稱與值就完成了。","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Tag Manager","slug":"Google-Tag-Manager","permalink":"https://samirliu127.github.io/tags/Google-Tag-Manager/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"頁面捲動深度追蹤","slug":"頁面捲動深度追蹤","date":"2019-11-16T05:05:33.000Z","updated":"2019-11-27T00:56:21.304Z","comments":true,"path":"posts/13266.html","link":"","permalink":"https://samirliu127.github.io/posts/13266.html","excerpt":"","text":"本站屬於技術分享的文章，最好的互動就是閱讀文章的深度，透過 GTM 可以簡單的設置當捲動深度達到目標百分比時當作是轉換。本篇可以拆分成三個部分：GTM 事件設定、GTM Debug、GA 目標設定。 Google Tag Manager 設置事件 Variable啟用內建變數Scroll Depth Threshold，拿來當作事件價值使用。 Trigger新增捲動深度的觸發條件，勾選捲動深度後分別設置 40 與 85 百分比，出發條件鎖定在文章頁面，開頭為 /posts/。 Tag 新增通用 Analytics (分析)。 追蹤類型改成 事件。 填上自訂義的類別、動作或標籤，標籤與值帶上預設變數Scroll Depth Threshold。 帶上以設置好的 GAID (不知道看這邊)。 新增觸發條件Scroll Depth 40與Scroll Depth 85 Debug 基本上只要 Google Tag Manager 設置事件發佈後就完成了，不過在正式環境還是 Debug 一下比較安全。 啟用預覽在 Google Tag Manager 右上角有個預覽按鈕，按下後出現橘色的框框即進入預覽模式。 確認事件觸發重新整理網站後底下出現 Debug 小工具，接著測試欲觸發的事件，確認左邊 Trigger 新增時，右邊 Tag 是否有被移動到 Tags Fired On This Event。 確認變數接著點入 Tag，可以確認 Tag 被觸發時所帶的變數是否符合預期。 Google Analytics 設置目標 目標用來衡量網站/應用程式達成指定目標的效果官方參考，目標追蹤完成文章閱讀 (捲動百分比達 80% 以上)。 根據 Tag 上所帶的參數設定。 之後就可以追訪客的目標達成率。","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Tag Manager","slug":"Google-Tag-Manager","permalink":"https://samirliu127.github.io/tags/Google-Tag-Manager/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"Google Analytics 常用術語整理","slug":"Google-Analytics-常用術語整理","date":"2019-11-15T03:24:21.000Z","updated":"2019-11-27T00:56:21.303Z","comments":true,"path":"posts/32961.html","link":"","permalink":"https://samirliu127.github.io/posts/32961.html","excerpt":"","text":"使用 Google Analytics 不得不了解一些名詞，這邊整理了一些常見的名詞，希望對一些初次使用 Google Analytics 的人有些幫助。 工作階段 (Session) Session 是 Google Analytics 裡重要且實用的指標(metrics)，一個 Session 代表一個訪客在網站內所發生的一系列互動，瀏覽、點擊或電子商務等。當遇到以下三種情況時，會進入下一個 Session。 閒置網站超時預設為 30 分鐘，可以在 GA 後臺修改：設定 &gt; 資源 &gt; 追蹤資訊 &gt; 工作階段設定 每天半夜 23:59:59過了午夜將用新的 Session 做計算。 新的「來源/媒介」(source/medium)訪客透過第一種來源/媒介到站，隨後不論是否離開網站，再透過第二種來源/媒介回到網站，將用新的 Session 做計算。 來源, 媒介, 廣告活動 (source, medium, campaign) 來源/媒介常用於追蹤廣告所帶來成效表現的維度(Dimension)。根據UTM參數，Google Analytics能辨別5件事： UTM 說明 範例 來源(Source) 標示為你網站流量的來源，如：網站、社群 utm_source=facebook 媒介(Medium) 標示為你網站流量的媒介，如：cpc、cpm utm_medium=cpc 廣告活動(campaign) 廣告活動形式、名稱。 utm_campaign=1111_sale 關鍵字(term) 通常是付費關鍵字廣告所使用的字詞。 utm_term=隨勛所欲 廣告內容(content) 辨識同一廣告中不同內容的 A/B 測試。 utm_content=textlink Google Analytics 管道（可略過）預設的系統管道定義反映出「預設管道分組」中，各管道組成元素目前的 Analytics (分析) 資料檢視。參考連結 管道 來源 媒介 說明 直接 Direct (direct) (not set) or (none) 參照連結網址 Referral (referral url) 媒介與參照連結網址達成完全比對。 隨機搜尋 Organic Search (organic) 媒介與隨機搜尋達成完全比對。 付費搜尋 Paid Search ^(cpc|ppc|paidsearch)$ 多媒體 Display ^(display|cpm|banner)$ 其他廣告 Other Advertising ^(cpv|cpa|cpp|content-text)$ 社交 Social ^(social|social-network|social-media|sm|social network|social media)$ 電子郵件 Email ^(email)$ (Other) 工作階段未與任何管道說明達成比對。 新使用者, 回訪者, 使用者, 使用者類型 新使用者 (New Users)指標(metrics)，訪客首次進站就會被記錄成新使用者，訪客的識別存於 cookie，所以當訪客切換了瀏覽器或是設備再次進站時，會被記錄另一個新使用者。 回訪者 (Returning Users)指標(metrics)，非首次進站都是回訪者，當天一個新訪客產生第二次的 Session，這時新用戶記錄 1 筆，回訪者也紀錄 1 筆。 使用者 (Users)指標(metrics)，不重複的使用者，不過用戶在不同設備和不同瀏覽器都會當作不同的使用者，並非真實唯一使用者。 使用者類型 (User Type)維度(Dimension)，可用於切分新使用者(New Visitor)與回訪者(Returning Visitor)。 跳出率, 離開率跳出率 (Bounce Rate)當訪客進到登陸頁(Landing Page)後，沒有進行下一步的互動便直接離站，此登陸頁會紀錄 1 筆跳出(Bounce)，計算基於 Session。 互動：是指有在 Google Analytics 上設置的事件。在一般只有全頁瀏覽追蹤的狀況下，第二頁的瀏覽行為視為所說的互動。可以是將註冊、填表單、加入購物車等行為列為互動，以純文章網站可以是捲動網頁當作是完成閱讀的互動。 離開率 (Exit Rate)訪客離開網站的頁面，也可以說是 Session 最後一筆瀏覽頁面的紀錄，該網頁會紀錄 1 筆離開(Exit)，計算基於 Page View。 例子UserA: Page A &gt; Page B &gt; Page C UserB: Page A &gt; Page D UserC: Page C UserD: Page C &gt; Page A &gt; Page B跳出率與離開率計算結果如下： 跳出率：PageA: 0% (2 個 Session 於 PageA 開始，皆為非單頁的 Session)PageB: 0%PageC: 50% (2 個 Session 於 PageC 開始，1 筆為單頁的 Session)PageD: 0% 離開率：PageA: 0% (3 筆 PV 數，皆為最後一頁)PageB: 50% (2 筆 PV 數，1 筆為最後一頁)PageC: 67% (3 筆 PV 數，2 筆為最後一頁)PageD: 100% (1 筆 PV 數，1 筆為最後一頁) 停留時間 網頁停留時間 (Time on Page)訪客在特定頁面上花費的時間（以秒為單位），計算方法是從下一個頁面的初始查看時間減去前一頁面的初始查看時間。此指標不適用於該屬性的退出頁面。 工作階段時間 (Time on Site)訪客 Session 的總時長（以秒為單位）。","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"Google Tag Manager 入門","slug":"Google-Tag-Manager-入門","date":"2019-11-12T12:40:56.000Z","updated":"2019-11-27T00:56:21.304Z","comments":true,"path":"posts/30024.html","link":"","permalink":"https://samirliu127.github.io/posts/30024.html","excerpt":"","text":"前一篇文章(GA?GTM? 傻傻分不清楚)提到 GA 與 GTM 的差異，不過為什麼要多一層 GTM 呢？這次來講 GTM 的基本介紹與使用方法。 使用 Google Tag Manager 的優點 1. 介面化操作新增、刪除、修改網站上的代碼。不懂程式也可以簡單在網頁設置追蹤碼，同時在管理追蹤上也更有效率。 2. 透過 GTM 可以快速測試代碼的可行性。在預覽模式就可以在本端測試代碼執行狀況，在 Debug 的畫面上可以很快的找到問題。從新增、修正到發佈只需要短短幾分鐘，這將大大節省了時間。 3. 提高網站的速度透過 GTM 去載入代碼是異步執行，這代表網站不會被載入較慢的代碼給拖累，提升網站的使用者體驗。 設置 Google Tag Manager 部署只需要在 GTM 裡找到兩段程式碼，分別放在 head 與 body 裡就完成了，參考官方 Quick Start Guide。 Google Tag Manager 基本結構 變數 (variable)定義具名的預留值，供觸發條件與代碼使用，又細分為內建變數與使用者自定義變數，列出幾個我常使用的變數。 內建變數 (Built-in Variables)：Click ElementClick ClassesClick ID 使用者自訂變數（User-defines Variables）：Google Analytics (分析) 設定 觸發條件 (Trigger)設定啟用代碼的規則與邏輯。 網頁瀏覽觸發順序：網頁瀏覽(PageView) =&gt; Dom 就緒(Dom Ready) =&gt; 視窗載入(Window Load) 點擊會使用到內建變數點擊(Click) 系列，須自行去變數啟用。 代碼(Tag)設置想要觸發的程式碼，列出幾個我常使用的預設模板。 Google Analytics (分析) – 通用 Analytics (分析) Google Ads 再行銷 Google Ads 轉換追蹤 Bing 廣告通用事件追蹤 Hotjar Tracking Code 當沒有預設模板使用自訂 HTML，如：Facebook Pixel 在 GTM 設置 GA 設置變數Google Analytics (分析) 設定，這變數好用在設定代碼時，不用每次都填入 GA Tracking ID 與相關的設定。 觸發條件預設就有All Pages，不需要設置。 代碼使用預設模板Google Analytics (分析) – 通用 Analytics (分析)，選擇變數GAID，選擇觸發條件All Pages，設置完後發佈。 檢查工具推薦使用 Tag Assistant，可以檢查 Google 服務的工具，啟用後重新整理網頁將會看到代碼的狀態。 其他小工具 介紹幾個廣告應用的小工具 Tag Assistant Facebook Pixel Helper Oath: Ad Platforms Dot Helper UET Tag Helper (by Bing Ads)","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Tag Manager","slug":"Google-Tag-Manager","permalink":"https://samirliu127.github.io/tags/Google-Tag-Manager/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"GA?GTM? 傻傻分不清楚","slug":"GA-GTM-傻傻分不清楚","date":"2019-11-10T13:23:11.000Z","updated":"2019-11-22T08:12:54.485Z","comments":true,"path":"posts/20419.html","link":"","permalink":"https://samirliu127.github.io/posts/20419.html","excerpt":"","text":"GA 跟 GTM 有什麼區別?許多剛接觸 GA 跟 GTM 的人，常常搞不清楚它們的差別，在這邊盡量的簡單說明一下。 Google Analytics (GA)Google Analytics 主要是追蹤你的網站，產生報告跟統計資訊。了解更多 多少人訪問了你的網站 網站裡那些頁面是最受歡迎的 使用者是透過甚麼管道進到你的網站 使用者的輪廓統計(年齡層、性別、興趣、地區分佈) 使用者在網站瀏覽的行為流程 Google Tag Manager (GTM)顧名思義代碼管理(Tag Manager)，Google Tag Manager 能讓用戶定義觸發某些代碼的規則，從而更輕鬆地管理這些混亂的代碼。 Google Tag Manager 並不會取代 Google Analytics，反而幫助用戶輕鬆將 Google Analytics 部屬到網站上。 Google Tag Manager 不只適用於 Google Analytics，其他包括： Google Ads Facebook Pixel Bing Ads Hotjar Tracking 其他自訂義 HTML/JavaScript 代碼 GA GTM 的關係： 使用 GTM 埋設 GA這裡簡單的示範在 GTM 埋設 GA 追蹤代碼。 在網站上設置 GTM，參考官方 Quick Start Guide。 找到 GA 追蹤編號。GA 後臺 (管理 &gt; 資源 &gt; 追蹤資訊 &gt; 追蹤程式碼) 即可找到如 UA-XXXXXXX-XX 的編號。 在 GTM 的代碼新增 通用 Analytics (分析) 的模塊，啟用覆寫後填入 GA 編號。 觸發條件選擇網頁瀏覽的 All Pages。 最後儲存後發佈。 以上就完成了基本設置。GA 將會追蹤所有已安裝 GTM 所有頁面的瀏覽量。 最後分享個 Chrome 的檢查小工具 Tag Assistant，啟用後在網站上就可以檢查各種 Google 相關產品的標籤狀態。連結點我","categories":[{"name":"網站分析","slug":"tracking","permalink":"https://samirliu127.github.io/categories/tracking/"}],"tags":[{"name":"Google Tag Manager","slug":"Google-Tag-Manager","permalink":"https://samirliu127.github.io/tags/Google-Tag-Manager/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://samirliu127.github.io/tags/Google-Analytics/"}]},{"title":"Markdown 簡易手冊","slug":"Markdown-簡易手冊","date":"2019-11-09T10:07:00.000Z","updated":"2019-11-15T03:25:40.353Z","comments":true,"path":"posts/6756.html","link":"","permalink":"https://samirliu127.github.io/posts/6756.html","excerpt":"","text":"標題當您想要將一段文字標示為標題的時候，請使用這個語法。請在行首輸入 # 符號，並在後面加上一個空白後，再輸入標題文字。標題有分成 6 個層級，# 的數量愈多，層級越低。 您可以按照範例輸入看看： # 第一層級標題 ## 第一層級標題 ### 第一層級標題 #### 第一層級標題 ##### 第一層級標題 ###### 第一層級標題以上範例結果為： 第一層級標題第一層級標題第一層級標題第一層級標題第一層級標題第一層級標題:::info:bulb: 小提示：覺得語法容易忘記嗎？沒關係！HackMD 提供貼心的自動完成功能，例如：您在行首輸入 #，就會出現自動完成選單，提示您可用的標題語法！ ::: 清單當您想要列舉一些項目的時候，請使用此語法，並且可以加上項目編號，將項目縮排即可作為子清單。清單分為有序清單與無序清單兩種。有序清單是項目符號會使用數字編號；無序清單是項目符號會使用同樣的層級的符號。 您可以按照範例輸入看看： - 無序清單 - 無序清單 - 無序清單子清單 - 無序清單子子清單 1. 有序清單 2. 有序清單 1. 有序清單子清單 1. 有序清單子子清單以上範例結果為： 無序清單 無序清單 無序清單子清單 無序清單子子清單 有序清單 有序清單 有序清單子清單 有序清單子子清單 引用區塊當您需要將一段文字標示為引用的時候，請使用此語法。請在行首輸入 &gt; 符號，並在後面加上一個空白後，再輸入引用文字，即可形成引用區塊。如在引用區塊前多次輸入 &gt; 符號，即是子引用區塊。 您可以按照範例輸入看看： &gt; 引用區塊 &gt;&gt; 子引用區塊 &gt;&gt;&gt; 子子引用區塊以上範例結果為： 引用區塊 子引用區塊 子子引用區塊 粗體、斜體當您需要將一段文字以粗體或是斜體表現的時候，請用此語法。請在文字兩端加上 * 符號，即可將文字變成粗體或是斜體使用一個 * 為斜體；使用兩個 * 為粗體。 您可以按照範例輸入看看： *斜體* **粗體**以上範例結果為： 斜體粗體 :::info:bulb: 小提示：使用編輯區塊上方的工具列，快速對選取中的文字加上格式 ::: 圖片當您需要在筆記中加入圖片的時候，請使用此語法。請先輸入 ![]() 這些文字，然後在後面的 () 中間插入圖片的網址，即可加入圖片。您也可以將圖片直接拖曳到編輯器、複製圖片後直接在編輯器貼上，都會直接將圖片上傳到 imgur 後自動插入圖片語法。 您可以按照範例輸入看看： ![](https://hackmd.io/favicon.png)以上範例結果為： :::info:bulb: 小提示：在空白之後輸入 ! 會有自動完成，提示您可用的圖片語法 ::: 影片當您需要加入影片的時候，請使用此語法。請先輸入 {} 這些文字，這時候會有自動完成： 接下來請按下列步驟： 在自動完成中選擇您的影片來源，可能是 youtube 或是 vimeo 假設您選擇 youtube，您的文字會變成 {%youtube youtubeid %} 假設您的影片連結是：https://www.youtube.com/watch?v=PJuNmlE74BQ 請您將文字中的 youtubeid 替換成您影片連結的 id，也就是 PJuNmlE74BQ 您的文字最後會是：","categories":[{"name":"隨筆","slug":"others","permalink":"https://samirliu127.github.io/categories/others/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://samirliu127.github.io/tags/markdown/"}]},{"title":"Hexo 常用指令","slug":"Hexo-常用指令","date":"2019-11-08T05:45:53.000Z","updated":"2019-11-15T03:25:37.446Z","comments":true,"path":"posts/23955.html","link":"","permalink":"https://samirliu127.github.io/posts/23955.html","excerpt":"","text":"文章命令行中輸入： $ hexo new \"new article\" # 建立文章 $ hexo new draft \"draft article\" # 建立草稿 $ hexo publish \"draft article\" # 發布文章 之後在 source/_posts 目錄下面，多了一個 new-article.md 的文件。 打開之後我們會看到： --- title: new article date: 2019-11-01 20:10:33 tags: --- 文件的開頭是屬性，採用統一的yaml格式，用三條短橫線分隔。下面是文章正文。 文章的正文支持markdown格式，建議你先學習一下它的語法。markdown不像html似的一大堆標籤，很簡單，只有幾個符號。 新建、刪除或修改文章後，不需要重啟hexo server，刷新一下即可預覽。 屬性文章可以擁有如下屬性： Setting Description Default layout layout post或page title 文章的標題 date 創建日期 文件的創建日期 updated 修改日期 文件的修改日期 comments 是否開啟評論 true tags 標籤 categories 分類 permalink url中的名字 文件名 部屬本端測試 $ hexo s --draft 清空暫存 $ hexo clean 打包並部屬 $ hexo d -g","categories":[{"name":"隨筆","slug":"others","permalink":"https://samirliu127.github.io/categories/others/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://samirliu127.github.io/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-06T16:00:00.000Z","updated":"2019-11-14T08:17:33.193Z","comments":true,"path":"posts/16107.html","link":"","permalink":"https://samirliu127.github.io/posts/16107.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"隨筆","slug":"others","permalink":"https://samirliu127.github.io/categories/others/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://samirliu127.github.io/tags/hexo/"}]}]}